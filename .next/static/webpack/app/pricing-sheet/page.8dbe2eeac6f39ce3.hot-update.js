"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/pricing-sheet/page",{

/***/ "(app-pages-browser)/./src/app/pricing-sheet/services/csvParser.ts":
/*!*****************************************************!*\
  !*** ./src/app/pricing-sheet/services/csvParser.ts ***!
  \*****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HEADER_MAPPINGS: function() { return /* reexport safe */ _csvParser_headerMappings__WEBPACK_IMPORTED_MODULE_0__.HEADER_MAPPINGS; },\n/* harmony export */   parseCSVData: function() { return /* binding */ parseCSVData; }\n/* harmony export */ });\n/* harmony import */ var _csvParser_headerMappings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csvParser/headerMappings */ \"(app-pages-browser)/./src/app/pricing-sheet/services/csvParser/headerMappings.ts\");\n/* harmony import */ var _csvParser_normalizers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./csvParser/normalizers */ \"(app-pages-browser)/./src/app/pricing-sheet/services/csvParser/normalizers.ts\");\n/* harmony import */ var _csvParser_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./csvParser/utils */ \"(app-pages-browser)/./src/app/pricing-sheet/services/csvParser/utils.ts\");\n// ========================================\n// ðŸŽ¼ CSV Parser Orchestrator\n// ========================================\n// Main orchestrator that coordinates header mapping, normalization, and parsing\n\n\n\n// Re-export mappings for external use\n\n// Helper function to parse CSV line with proper quote handling\nfunction parseCSVLine(line) {\n    const result = [];\n    let current = \"\";\n    let inQuotes = false;\n    for(let i = 0; i < line.length; i++){\n        const char = line[i];\n        const nextChar = line[i + 1];\n        if (char === '\"') {\n            if (inQuotes && nextChar === '\"') {\n                // Escaped quote\n                current += '\"';\n                i++ // Skip next quote\n                ;\n            } else {\n                // Toggle quote mode\n                inQuotes = !inQuotes;\n            }\n        } else if (char === \",\" && !inQuotes) {\n            // End of field\n            result.push(current.trim());\n            current = \"\";\n        } else {\n            current += char;\n        }\n    }\n    // Add last field\n    result.push(current.trim());\n    return result;\n}\n// Main CSV parsing function - orchestrates the entire process\nfunction parseCSVData(csvContent) {\n    const result = {\n        success: false,\n        data: [],\n        errors: [],\n        warnings: []\n    };\n    try {\n        const lines = csvContent.split(\"\\n\").filter((line)=>line.trim());\n        if (lines.length < 2) {\n            result.errors.push(\"CSV must have at least header row and one data row\");\n            return result;\n        }\n        // Performance check for very large files\n        if (lines.length > 10000) {\n            result.warnings.push(\"Large file detected. Processing may take longer.\");\n        }\n        // Parse headers using header mappings with proper quote handling\n        const headers = parseCSVLine(lines[0]);\n        const fieldMapping = {};\n        // Map headers to fields using the mappings\n        headers.forEach((header, index)=>{\n            const fieldKey = (0,_csvParser_utils__WEBPACK_IMPORTED_MODULE_2__.findFieldKey)(header, _csvParser_headerMappings__WEBPACK_IMPORTED_MODULE_0__.HEADER_MAPPINGS);\n            if (fieldKey) {\n                fieldMapping[index] = fieldKey;\n            }\n        });\n        // Check if we have essential fields (only truly required fields)\n        const requiredFields = [\n            \"gender\",\n            \"age\",\n            \"firstName\",\n            \"lastName\",\n            \"paymentAmount\",\n            \"paymentStartDate\",\n            \"paymentEndDate\"\n        ];\n        const missingFields = requiredFields.filter((field)=>!Object.values(fieldMapping).includes(field));\n        if (missingFields.length > 0) {\n            result.errors.push(\"Missing required fields: \".concat(missingFields.join(\", \"), \". Found headers: \").concat(headers.join(\", \")));\n            return result;\n        }\n        // Check for optional fields and add warnings\n        const hasPaymentType = Object.values(fieldMapping).includes(\"typeOfPayment\");\n        const hasPaymentFrequency = Object.values(fieldMapping).includes(\"paymentFrequency\");\n        if (!hasPaymentType) {\n            result.warnings.push(\"Payment Type not found - defaulting to LCP for all rows\");\n        }\n        if (!hasPaymentFrequency) {\n            result.warnings.push(\"Payment Frequency not found - defaulting to Monthly for all rows\");\n        }\n        // Parse data rows with progress indication for large files\n        const totalRows = lines.length - 1 // Exclude header\n        ;\n        for(let i = 1; i < lines.length; i++){\n            // Progress indication for very large files\n            if (totalRows > 5000 && i % 1000 === 0) {\n                console.log(\"Processing row \".concat(i, \" of \").concat(totalRows));\n            }\n            const values = parseCSVLine(lines[i]);\n            // More lenient column count check - allow extra columns to be ignored\n            if (values.length < headers.length) {\n                result.warnings.push(\"Row \".concat(i + 1, \": Too few columns (expected \").concat(headers.length, \", got \").concat(values.length, \")\"));\n                continue;\n            }\n            // If there are extra columns, just ignore them (don't warn)\n            if (values.length > headers.length) {\n                // Silently truncate to header length - this is normal for files with extra columns\n                values.length = headers.length;\n            }\n            const row = {\n                gender: \"\",\n                age: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                insuranceCompany: \"\",\n                typeOfPayment: \"LCP\",\n                paymentFrequency: \"Monthly\",\n                paymentStartDate: \"\",\n                paymentEndDate: \"\",\n                paymentAmount: \"\",\n                annualIncrease: \"0\",\n                // Contact (optional)\n                crmId: \"\",\n                phone1: \"\",\n                phone2: \"\",\n                phone3: \"\",\n                // Address (optional)\n                fullAddress: \"\",\n                streetAddress1: \"\",\n                streetAddress2: \"\",\n                city: \"\",\n                state: \"\",\n                zipCode: \"\"\n            };\n            // Map values to fields using normalization functions\n            Object.entries(fieldMapping).forEach((param)=>{\n                let [index, fieldKey] = param;\n                const valueIndex = parseInt(index);\n                if (valueIndex < values.length) {\n                    let value = values[valueIndex];\n                    // Apply appropriate normalization based on field type\n                    switch(fieldKey){\n                        case \"gender\":\n                            value = (0,_csvParser_normalizers__WEBPACK_IMPORTED_MODULE_1__.normalizeGender)(value);\n                            break;\n                        case \"paymentFrequency\":\n                            value = (0,_csvParser_normalizers__WEBPACK_IMPORTED_MODULE_1__.normalizeFrequency)(value);\n                            break;\n                        case \"typeOfPayment\":\n                            value = (0,_csvParser_normalizers__WEBPACK_IMPORTED_MODULE_1__.normalizePaymentType)(value);\n                            break;\n                        case \"annualIncrease\":\n                            value = (0,_csvParser_normalizers__WEBPACK_IMPORTED_MODULE_1__.normalizeAnnualIncrease)(value);\n                            break;\n                        case \"paymentAmount\":\n                            value = (0,_csvParser_normalizers__WEBPACK_IMPORTED_MODULE_1__.normalizeAmount)(value);\n                            break;\n                        case \"paymentStartDate\":\n                        case \"paymentEndDate\":\n                            value = (0,_csvParser_normalizers__WEBPACK_IMPORTED_MODULE_1__.normalizeDate)(value);\n                            break;\n                    }\n                    row[fieldKey] = value;\n                }\n            });\n            result.data.push(row);\n        }\n        // Success message with row count\n        result.success = true;\n        // Only show relevant warnings (not column count mismatches which are now handled)\n        const relevantWarnings = result.warnings.filter((w)=>!w.includes(\"Column count mismatch\") && !w.includes(\"Too few columns\"));\n        // Clear warnings and add only relevant ones\n        result.warnings = relevantWarnings;\n        if (result.data.length > 0) {\n            console.log(\"âœ… Successfully parsed \".concat(result.data.length, \" rows from CSV\"));\n        }\n        return result;\n    } catch (error) {\n        result.errors.push(\"Parse error: \".concat(error));\n        return result;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/pricing-sheet/services/csvParser.ts\n"));

/***/ })

});